version: '3'

services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: always

  auth-service:
    build:
      context: ./api-gateway
      dockerfile: apps/auth-service/Dockerfile
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: always

  file-service:
    build:
      context: ./api-gateway
      dockerfile: apps/file-service/Dockerfile
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: always

  email-service:
    build:
      context: ./api-gateway
      dockerfile: apps/email-service/Dockerfile
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: always

volumes:
  postgres_data:
  rabbitmq_data:

networks:
  app-network:
    driver: bridge
